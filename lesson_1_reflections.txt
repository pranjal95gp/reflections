How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The diff command, when operated on the old code file and the new code file , listed the lines which had different characters. This helped us find out the typo in the code which was not in the older file.
    The different versions of the file were manually saved. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It maked us more efficient programmer as it allows us to compare the different versions of the code. This has advantages like-
1) Fast debugging (of typos)
2) Finding out the more efficent code, by comparing their time complexity.


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pros of manually creating a commit point-
    1) Commit only when there is a logical change, for example when you change two unrelated bugs.
    2)Avoids too many unnecessary commit points , being difficult to find the needed one.
    The cons of manual saving -
    1)It does not help forgetful users.
    

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git works on codes, files of which are mostly inter related. So version control systems like Git allows saving multiple files in one commit , which is similar to saving the state of the whole project at an instant).
    Google Docs treat each file seperately because doc files are not related to each other.

How can you use the commands git log and git diff to view the history of files?

   The command git log allows us to see the commit points (over a file or a repository I guess.) with the labels we to on them.
   The git diff makes us see the difference b/w any two commit points through commit id obtained from git log.

How might using version control make you more confident to make changes that
could break something?

    Then using verion control, I can switch my code version to a previos one anytime when I am discomfortable with the present code. So even if the changes I make breaks the entire code, I can revert the changes any time to any of the commits.

Now that you have your workspace set up, what do you want to try using Git for?

    I would want to try using git for my projects, specifically for android project . I would also want to make use of git in future in the most efficient way.